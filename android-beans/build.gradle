apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "${project.version}"
        // append version to android build-artifacts:
        android.libraryVariants.all { outputs.all {
            outputFileName = outputFileName.replace("$archivesBaseName", "$archivesBaseName-$version") }
        }
		consumerProguardFile('proguard-rules.pro')
    }

    buildTypes {
        release {
            minifyEnabled false

            // strip "-release"-qualifier from artifact file-names, because release is the default:
            android.libraryVariants.matching { variant -> variant.name == "release" }.all { outputs.all {
                outputFileName = outputFileName.replace("-release", "") }
            }
        }
    }
}

dependencies {
	implementation 'net.sourceforge.streamsupport:streamsupport:1.7.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0-alpha03'

	testImplementation ('junit:junit:4.12') {
        exclude group: 'org.hamcrest'
    }
    testImplementation 'org.hamcrest:hamcrest:2.1'
    testImplementation 'org.mockito:mockito-core:2.25.1'
    testImplementation 'org.robolectric:android-all:8.1.0-robolectric-r4458339'
}

task javadoc(type: Javadoc) {
	source android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        classpath += variant.javaCompileProvider.get().classpath
    }
    options.memberLevel = JavadocMemberLevel.PROTECTED
    exclude '**/BuildConfig.class'
    exclude '**/R.class'
    exclude '**/R$*.class'
}
task javadocJar(type: Jar, dependsOn: javadoc) {
	from "$buildDir/docs/javadoc"
	classifier = 'javadoc'
	archiveName = "${project.name}-${version}-${classifier}.jar"
}

task sourcesJar(type: Jar) {
	from android.sourceSets.main.java.srcDirs
	classifier = 'sources'
}

publishing {
	publications {
		maven(MavenPublication) {
			pom.withXml {
				asNode().appendNode('name', 'android-beans')
				asNode().appendNode('description', 'A dependency injection library for Java Android apps.')
				asNode().appendNode('licenses').appendNode('license')
						.appendNode('name', 'MIT').parent()
						.appendNode('url', 'https://opensource.org/licenses/MIT').parent()
				asNode().appendNode('scm')
						.appendNode('url', 'https://github.com/christopherfrieler/android-beans').parent()
				asNode().appendNode('developers').appendNode('developer')
						.appendNode('name', 'Christopher Frieler').parent()
				def dependenciesNode = asNode().appendNode('dependencies')
				configurations.api.allDependencies.each {
					def dependencyNode = dependenciesNode.appendNode('dependency')
					dependencyNode.appendNode('groupId', it.group)
					dependencyNode.appendNode('artifactId', it.name)
					dependencyNode.appendNode('version', it.version)
				}
			}

			afterEvaluate {
				artifact(bundleReleaseAar)
				artifact(javadocJar)
				artifact(sourcesJar)
			}
		}
	}
}

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_API_KEY')

	pkg {
		repo = 'android'
		name = project.name
		userOrg = 'christopherfrieler'
		licenses = ['MIT']
		desc = 'A dependency injection library for Java Android apps.'
		vcsUrl = 'https://github.com/christopherfrieler/android-beans.git'
		githubRepo = 'christopherfrieler/android-beans'

		version {
			name = project.version
		}
	}
	publish = true

	publications = ['maven']
}
